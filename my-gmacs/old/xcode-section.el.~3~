;; run xcodebuild from dir containing project.. eg: code/products/player/osx/FlashPlayer.xcodeproj

(defun xcodebuild-list-shell ()
  "Prints xcodebuild help and target/configuration list to a shell buffer."
  (interactive)
  (shell-command "/Developer/usr/bin/xcodebuild -help ; xcodebuild -list"))

(defun xcodebuild-list ()
  "Returns Xcode target/configuration lines for project in current directory."
  (interactive)
  (process-lines "/Developer/usr/bin/xcodebuild" "-list"))

;; until-drop : String [Listof String] -> [Listof String]
;; (until-drop c (list aa bb cc dd ee ff)) => (dd ee ff)
(defun until-drop (name l)
  "Drops every element up to and including the element matching name."
  (cond ((null l) nil)
        ((string-match name (car l)) (cdr l))
        (t (until-drop name (cdr l)))))

;; until-take : String [Listof String] -> [Listof String]
;; (until-take d (list aa bb cc dd ee ff)) => (aa bb cc)
(defun until-take (name l)
  "Accumulates every element up to but excluding the element matching name"
  (cond ((null l) nil)
        ((string-match name (car l)) nil)
        (t (cons (car l) (until-take name (cdr l))))))

;; extract-subsequence : String String [Listof String] -> [Listof String]
;; (extract-subsequence b e (list aa bb cc dd ee ff)) => (cc dd)
(defun extract-subsequence (start-marker end-marker l)
  "Produces subsequence exclusively bounded by start and end markers"
  (until-drop start-marker (until-take end-marker l)))

;; remove-spaces-and-active-marker : String -> String
(defun remove-spaces-and-active-marker (line)
  "Removes space characters and occurrences of \"(Active)\" from line."
  (replace-regexp-in-string
   " " "" (replace-regexp-in-string "(Active)" "" line)))

;; extract-xcode-targets : [Listof String] -> [Listof String]
(defun extract-xcode-targets (lines)
  "Extracts the list of targets from lines."
  (mapcar 'remove-spaces-and-active-marker
          (extract-subsequence "Targets:"
                               "Build Configurations:"
                               lines)))

;; extract-xcode-configs : [Listof String] -> [Listof String]
(defun extract-xcode-configs (lines)
  "Extracts the list of Xcode configurations from lines."
  (mapcar 'remove-spaces-and-active-marker
          (extract-subsequence "Build Configurations:"
                               "If no build configuration is specified"
                               lines)))

(defun xcodebuild-list-targets ()
  "Returns list of Xcode targets for project in current directory."
  (interactive)
  (extract-xcode-targets (xcodebuild-list)))

(defun xcodebuild-list-configs ()
  "Returns list of Xcode configurations for project in current directory."
  (interactive)
  (extract-xcode-configs (xcodebuild-list)))

;; insert-everywhere : forall X . X [Listof X] -> [Listof [Listof X]]
;; (insert-everywhere a (list b c)) => ((a b c) (b a c) (b c a))
(defun insert-everywhere (first lst)
  "Inserts first at every point before and after the elements of lst."
  (cond ((null lst) (list (list first)))
        (t (cons (cons first lst)
                 (mapcar (lambda (x) (cons (car lst) x))
                         (insert-everywhere first (cdr lst)))))))

;; no-empties : [Listof X] -> [Listof X]
;; (no-empties (list a b "" nil c d "" e nil f)) => (a b c d e f)
(defun no-empties (lst)
  "Removes empty strings and lists from lst."
  (cond ((null lst) nil)
        (t (cond ((null (car lst))     (no-empties (cdr lst)))
                 ((equal "" (car lst)) (no-empties (cdr lst)))
                 (t (cons (car lst) (no-empties (cdr lst))))))))

;; list-combinations : [Listof X] -> [Listof [Listof X]]
;; (list-combinations (list a b)) => ((a b) (b a) (a) (b) ())
;; [[ really should be called list-powerlist or list-sublist-permutations ]]
(defun list-combinations (args)
  "Returns list of all permutations of all subcollections of args."
  (cond ((null args) (list nil))
        (t (let ((cs (list-combinations (cdr args))))
             (append (apply 'append
                            (mapcar (lambda (c) (insert-everywhere (car args) c))
                             cs))
                     cs)))))

;; string-combinations : [Listof String] -> [Listof String]
;; (string-combinations (list "a" "b")) => ("a b" "b a" "a" "b" "")
(defun string-combinations (args)
  "Returns list of all concatentations of subcollections of args."
  (mapcar (lambda (c) (mapconcat 'identity c " "))
          (list-combinations args)))

(defun xcodebuild (archs cfg tgt cmds)
  "Compile via xcodebuild prompting for ARCHS, config, target and commands."
  ; (interactive "sARCHS: \nsconfiguration: \nstarget: ")
  (interactive (progn
                 ;; Can fall back on this if necessary; it prints output to window
                 ;; (xcodebuild-list-shell)
                 (let ((xcode-lines (xcodebuild-list)))
                   (let ((archs '("x86_64" "i386"))
                         (configs (no-empties (extract-xcode-configs xcode-lines)))
                         (targets (no-empties (extract-xcode-targets xcode-lines))))
                     (list
                      (completing-read (format "ARCHS %s: " archs)
                                       (no-empties (string-combinations archs)))
                      (completing-read (format "configuration %s: " configs)
                                       (no-empties configs))
                      (completing-read "target: " (no-empties targets))
                      (completing-read "commands (build): "
                                       (list "build" "clean" "clean build"))
                      )))))
  (let ((archs-arg (concat " ONLY_ACTIVE_ARCH=NO ARCHS=\"" archs "\""))
        (cfg-arg (concat " -configuration " cfg))
        (tgt-arg (concat " -target " tgt))
        (tmp-file (make-temp-file "xcodebuild" nil ".log")))
    (let ((cmd (concat "time ( /Developer/usr/bin/xcodebuild" archs-arg cfg-arg tgt-arg
                       " " cmds
                       " | tee " tmp-file
                       " | grep --before-context=5 ':' "
                       "&& tail -5 " tmp-file " )")))
      (compile cmd))))

(defun ormap (pred l)
  (cond ((consp l) (cond ((funcall pred (car l))
                          (cons (car l) (ormap pred (cdr l))))
                         (t
                          (ormap pred (cdr l)))))
        ((null l) nil)))

(defvar system-processor-count
  (read (car (process-lines "sysctl" "-n" "hw.ncpu"))))

(defun compile-including-xcode ()
  "Compile first looking for Xcode support in current directory."
  (interactive)
  (let* ((suffix ".xcodeproj")
         (dirent-is-xcodeproj
          (lambda (filename)
            (and (> (length filename) (length suffix))
                 (string-equal (substring filename (- (length suffix)))
                               suffix))))
         (has-proj-file (ormap dirent-is-xcodeproj
                               (directory-files ".")))
         (core-count-guess (number-to-string system-processor-count))
         (xcode-invoke "/Developer/usr/bin/xcodebuild")
         (make-invoke (concat "make -j" core-count-guess)))
    (if has-proj-file
        ; then
        (call-interactively 'xcodebuild)
      ; else
      (compile (concat "time " make-invoke)))))

(defun compile-in-compilation-buffer ()
  "Reattempt current compilation."
  (interactive)
  (if (not (string-match "*compil*" (buffer-name)))
      (switch-to-buffer "*compilation*"))
  (compile-including-xcode))

;; (global-set-key (kbd "<f5>") 'compile-including-xcode)
(global-set-key (kbd "<f5>") 'compile-in-compilation-buffer)
